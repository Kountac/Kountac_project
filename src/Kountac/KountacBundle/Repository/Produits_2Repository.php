<?php

namespace Kountac\KountacBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Produits_2Repository extends EntityRepository
{
    public function getProduitByMarque($marque_id) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->setParameter('marque', $marque_id)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri($prix, $motif, $taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T1($prix) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->where('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T2($motif) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->where('p2.libelle = :motif')
                ->setParameter('motif', $motif)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T3($prix, $motif) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T4($taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->where('p3.taille = :taille')
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T5($prix, $taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T6($motif, $taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->where('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('motif', $motif)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T7($prix, $motif, $taille) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T8($marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T9($prix, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T10($motif, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.libelle = :motif')
                 ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T11($prix, $motif, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T12($taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p3.taille = :taille')
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T13($prix, $taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T14($motif, $taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T15($prix, $motif, $taille, $marque) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T16($categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->setParameter('categorie', $categorie)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T17($prix, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('categorie', $categorie)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T18($motif, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.libelle = :motif')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T19($prix, $motif, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T20($taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T21($prix, $taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T22($motif, $taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T23($prix, $motif, $taille, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T24($marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T25($prix, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.europrix <= :prix')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T26($motif, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.libelle = :motif')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T27($prix, $motif, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T28($taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T29($prix, $taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.europrix <= :prix')
                ->orWhere('p2.cfaprix <= :prix')
                ->orWhere('p2.usaprix <= :prix')
                ->orWhere('p2.livreprix <= :prix')
                ->orWhere('p2.nairaprix <= :prix')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('marque', $marque)
                ->setParameter('prix', $prix)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProductByTri_T30($motif, $taille, $marque, $categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->leftJoin('p2.produit_3', 'p3')
                ->addSelect('p3')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.marque = :marque')
                ->andWhere('p2.libelle = :motif')
                ->andWhere('p3.taille = :taille')
                ->setParameter('categorie', $categorie)
                ->setParameter('motif', $motif)
                ->setParameter('marque', $marque)
                ->setParameter('taille', $taille)
                ->orderBy('p2.id', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function byCategorie_3($categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.categorie = :categorie')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.libelle')
                ->setParameter('categorie', $categorie)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function byCategorie_2($categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('p1.categorie = :categorie')
                ->orWhere('cat.parent = :categorie')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.libelle')
                ->setParameter('categorie', $categorie)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function byCategorie_1($categorie) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->leftJoin('p1.categorie', 'cat')
                ->addSelect('cat')
                ->where('p1.categorie = :categorie')
                ->orWhere('size(cat.children) >= :seuil')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.libelle')
                ->setParameter('categorie', $categorie)
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
   
    public function byCollection($collection) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.collection = :collection')
                ->andWhere('p1.stock >= :seuil')
                ->orderBy('p2.id')
                ->setParameter('seuil', '1')
                ->setParameter('collection', $collection);
        return $qb->getQuery()->getResult();
    }
    
    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('u')
                ->Select('u')
                ->Where('u.id IN (:array)')
                ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }
    
    public function recherche($chaine) 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.nom like :chaine')
                ->orWhere('p1.description like :chaine')
                ->andWhere('p1.stock >= :seuil')
                ->setParameter('chaine', '%'.$chaine.'%')
                ->setParameter('seuil', '1')
                ->orderBy('p2.libelle', 'ASC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopularite() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.popularite', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopulariteTime() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.dateachat', 'DESC')
                ->setParameter('seuil', '1')
                ->setMaxResults(6)
                ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByPopulariteMenu() 
    {
        $qb = $this->createQueryBuilder('p2')
                ->select('p2')
                ->leftJoin('p2.produit_1', 'p1')
                ->addSelect('p1')
                ->where('p1.stock >= :seuil')
                ->orderBy('p1.popularite', 'DESC')
                ->setParameter('seuil', '1')
                ->setMaxResults(3)
                ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByNouveaute() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock >= :seuil')
                ->orderBy('u.id', 'DESC')
                ->setParameter('seuil', '1');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByReduction() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->orderBy('u.reduction', 'DESC');
        return $qb->getQuery()->getResult();
    }
    
    public function getProduct_2($produit1) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.produit_1 = :produit1')
                ->setParameter('produit1', $produit1)
                ->orderBy('u.id', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByTaille($taille, $id) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.taille = :taille')
                ->andWhere('u.id != :id')
                ->andWhere('u.stock >= :seuil')
                ->setParameter('taille', $taille)
                ->setParameter('id', $id)
                ->setParameter('seuil', '1')
                ->orderBy('u.popularite', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByMarque($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.marque = :user')
                ->setParameter('user', $user)
                ->orderBy('u.id', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsByStock($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock <= :stock')
                ->andWhere('u.marque = :user')
                ->setParameter('user', $user)
                ->setParameter('stock', '2')
                ->orderBy('u.stock', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsAdminByStock() 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.stock <= :stock')
                ->setParameter('stock', '2')
                ->orderBy('u.stock', 'ASC')
        ;
        return $qb->getQuery()->getResult();
    }
    
    public function getProduitsBySales($user) 
    {
        $qb = $this->createQueryBuilder('u')
                ->select('u')
                ->where('u.dateachat != :null')
                ->andWhere('u.marque = :user')
                ->setParameter('user', $user)
                ->setParameter('null', 'NULL')
                ->orderBy('u.dateachat', 'DESC')
        ;
        return $qb->getQuery()->getResult();
    }
}
